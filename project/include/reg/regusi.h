/*
(c) 2015 - Sergio Formiggini
sergio.formiggini@gmail.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

A little fee is required if you use this software for business or
industrial/commercial product.
*/

#ifndef USI_H
#define USI_H

#include "regdport.h"

#ifdef __AVR_ATtiny84__
#define __AVR_Selected
#define ___tiny84
#endif
#ifdef __AVR_ATtiny85__
#define __AVR_Selected
#define ___tiny85
#endif

#ifndef __AVR_Selected
#pragma message "Compiling - Unrecognized CPU (Using Tiny84)"
#define ___tiny84
#endif

#ifdef __AVR_Selected
#undef __AVR_Selected
#endif

#define	__USE_CHIP_USISPI_PROTOCOL__ // (*2) - spi.c (*WR) at now doesn't run
#undef 	__USE_CHIP_USISPI_PROTOCOL__

//USIDR – USI Data Register
//Bit  7 ... 0
//0x0F MSB   LSB
#define USIDR   REGDECL(0xF)

//USIBR – USI Buffer Register
//Bit  7 ... 0
//0x10 MSB   LSB
#define USIBR   REGDECL(0x10)

//USISR – USI Status Register
//Bit  7      6      5     4     3       2       1       0
//0x0E USISIF USIOIF USIPF USIDC USICNT3 USICNT2 USICNT1 USICNT0
#define USISR   REGDECL(0x0E)
#define USISIF  BV_(7)
#define USIOIF  BV_(6)
#define USIPF   BV_(5)
#define USIDC   BV_(4)

#define USICNT_0_3      (0xF)
#define USICNT()        (USISR&USICNT_0_3)
#define SETUSICNT(n)    USISR=SETBITS(USISR,n,USICNT_0_3)

//USICR – USI Control Register
//Bit   7      6      5      4      3      2      1      0
//0x0D  USISIE USIOIE USIWM1 USIWM0 USICS1 USICS0 USICLK USITC
#define USICR   REGDECL(0x0D)
#define USISIE  BV_(7)
#define USIOIE  BV_(6)

//USIWM1 USIWM0
//0      0       Outputs, clock hold, and start detector disabled.
//               Port pins operates as normal.
//
//0      1       Three-wire mode. Uses DO, DI, and USCK pins.
//               The Data Output (DO) pin overrides the corresponding
//               bit in the PORTB register. However, the corresponding
//               DDRB bit still controls the data direction. When the
//               port pin is set as input the pin pull-up is controlled
//               by the PORTB bit. The Data Input (DI) and Serial Clock
//               (USCK) pins do not affect the normal port operation.
//               When operating as master, clock pulses are software
//               generated by toggling the PORTB register, while the data
//               direction is set to output. The USITC bit in the USICR
//               register can be used for this purpose.
//
//1      0       Two-wire mode. Uses SDA (DI) and SCL (USCK) pins (1).
//               The Serial Data (SDA) and the Serial Clock (SCL) pins
//               are bi-directional and use open-collector output drives.
//               The output drivers are enabled by setting the corresponding
//               bit for SDA and SCL in the DDRB register. When the output
//               driver is enabled for the SDA pin it will force the line
//               SDA low if the output of the USI Data Register or the
//               corresponding bit in the PORTB register is zero. Otherwise,
//               the SDA line will not be driven (i.e., it is released).
//               When the SCL pin output driver is enabled the SCL line will
//               be forced low if the corresponding bit in the PORTB register
//               is zero, or by the start detector. Otherwise the SCL line
//               will not be driven. The SCL line is held low when a start
//               detector detects a start condition and the output is enabled.
//               Clearing the Start Condition Flag (USISIF) releases the line.
//               The SDA and SCL pin inputs is not affected by enabling this
//               mode. Pull-ups on the SDA and SCL port pin are disabled in
//               Two-wire mode.
//
//1      1       Two-wire mode. Uses SDA and SCL pins.
//               Same operation as in two-wire mode above, except that the
//               SCL line is also held low when a counter overflow occurs,
//               and until the Counter Overflow Flag (USIOIF) is cleared.
#define USIWM0          BV_(4)
#define USIWM1          BV_(5)
#define USIWM_DISABLED  0
#define USIWM_3W        (USIWM0)
#define USIWM_2W_1      (USIWM1)
#define USIWM_2W_2      (USIWM1|USIWM0)

//USICS1 USICS0 [USICLK]
//0      0      0 No Clock No Clock
//0      0      1 Software clock strobe (USICLK) Software clock strobe (USICLK)
//0      1      X Timer/Counter0 Compare Match Timer/Counter0 Compare Match
//1      0      0 External, positive edge External, both edges
//1      1      0 External, negative edge External, both edges
//1      0      1 External, positive edge Software clock strobe (USITC)
//1      1      1 External, negative edge Software clock strobe (USITC)
#define USICS1          BV_(3)
#define USICS0          BV_(2)
#define USICS_NOCLK      0
#define USICS_T0CMP      (USICS0)
#define USICS_POSEDGE    (USICS1)
#define USICS_NEGEDGE    (USICS1|USICS0)

#define USICLK          BV_(1)
#define USITC           BV_(0)

#ifdef ___tiny85
#define PORTUSI         PORTB
#define DDRUSI          DDRB
#define PINUSI          PINB
#define MISO            PB1
#define MOSI            PB0
#define SCK             PB2
#endif

#ifdef ___tiny84
#define PORTUSI         PORTA
#define DDRUSI          DDRA
#define PINUSI          PINA
#define MISO            PA5
#define MOSI            PA6
#define SCK             PA4
#endif

#ifdef ___tiny84
#undef ___tiny84
#endif

#ifdef ___tiny85
#undef ___tiny85
#endif

#endif // USI_H
